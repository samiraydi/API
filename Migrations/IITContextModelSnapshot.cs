// <auto-generated />
using System;
using IIT.Clubs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IIT.Clubs.API.Migrations
{
    [DbContext(typeof(IITContext))]
    partial class IITContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IIT.Clubs.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_creation");

                    b.Property<string>("DemaineActivite")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("demaine_activite");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("IdFondateur")
                        .HasColumnType("integer")
                        .HasColumnName("id_fondateur");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_club");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.HasIndex("IdFondateur");

                    b.ToTable("club");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Evennement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("IdClub")
                        .HasColumnType("integer")
                        .HasColumnName("id_club");

                    b.Property<int>("IdOrganisateur")
                        .HasColumnType("integer")
                        .HasColumnName("id_organisateur");

                    b.Property<int>("NbParticipants")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("nombre_participants");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("titre");

                    b.HasKey("Id");

                    b.HasIndex("IdClub");

                    b.HasIndex("IdOrganisateur");

                    b.ToTable("evennement");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Inscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdClub")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("id_club");

                    b.Property<int>("IdMembre")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("id_membre");

                    b.HasKey("Id");

                    b.HasIndex("IdClub");

                    b.HasIndex("IdMembre");

                    b.ToTable("Inscription");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("material");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Participation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdEvennement")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("id_evennement");

                    b.Property<int>("IdParticipant")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("id_participant");

                    b.HasKey("Id");

                    b.HasIndex("IdEvennement");

                    b.HasIndex("IdParticipant");

                    b.ToTable("Participation");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Personne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_naissance");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Etablissement")
                        .HasColumnType("text")
                        .HasColumnName("etablissement");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nom")
                        .HasColumnType("text")
                        .HasColumnName("nom_personne");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Occupation")
                        .HasColumnType("text")
                        .HasColumnName("occupation");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Prenom")
                        .HasColumnType("text")
                        .HasColumnName("prenom_personne");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_debut");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_fin");

                    b.Property<int>("IdEvennement")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("id_evennement");

                    b.Property<int>("IdMaterial")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("id_material");

                    b.Property<int>("IdSalle")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("id_salle");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("statut");

                    b.HasKey("Id");

                    b.HasIndex("IdEvennement");

                    b.HasIndex("IdMaterial");

                    b.HasIndex("IdSalle");

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Salle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Emplacement")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("emplacement");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("salle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Club", b =>
                {
                    b.HasOne("IIT.Clubs.Models.Personne", "Fondateur")
                        .WithMany("Clubs")
                        .HasForeignKey("IdFondateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fondateur");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Evennement", b =>
                {
                    b.HasOne("IIT.Clubs.Models.Club", "Club")
                        .WithMany("Evennements")
                        .HasForeignKey("IdClub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIT.Clubs.Models.Personne", "Organisateur")
                        .WithMany("Evennements")
                        .HasForeignKey("IdOrganisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Organisateur");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Inscription", b =>
                {
                    b.HasOne("IIT.Clubs.Models.Club", "Club")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IdClub")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("IIT.Clubs.Models.Personne", "Membre")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IdMembre")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Participation", b =>
                {
                    b.HasOne("IIT.Clubs.Models.Evennement", "Evennement")
                        .WithMany("Participations")
                        .HasForeignKey("IdEvennement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIT.Clubs.Models.Personne", "Participant")
                        .WithMany("Participations")
                        .HasForeignKey("IdParticipant")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Evennement");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Reservation", b =>
                {
                    b.HasOne("IIT.Clubs.Models.Evennement", "Evennement")
                        .WithMany("Reservations")
                        .HasForeignKey("IdEvennement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIT.Clubs.Models.Material", "Material")
                        .WithMany("Reservations")
                        .HasForeignKey("IdMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIT.Clubs.Models.Salle", "Salle")
                        .WithMany("Reservations")
                        .HasForeignKey("IdSalle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evennement");

                    b.Navigation("Material");

                    b.Navigation("Salle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("IIT.Clubs.Models.Personne", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("IIT.Clubs.Models.Personne", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IIT.Clubs.Models.Personne", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("IIT.Clubs.Models.Personne", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IIT.Clubs.Models.Club", b =>
                {
                    b.Navigation("Evennements");

                    b.Navigation("Inscriptions");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Evennement", b =>
                {
                    b.Navigation("Participations");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Material", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Personne", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Evennements");

                    b.Navigation("Inscriptions");

                    b.Navigation("Participations");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("IIT.Clubs.Models.Salle", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
